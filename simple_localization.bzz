#This code has two parts: a function that creates an origin on robot R0, and this #robot calculates the positions of its neighbors and broadcasts that to them. The #other part is a function that uses this position to do a simple task, in this case #to let a robot go to a certain goal point wrt the local coordinates of robot R0.

#This Buzz code is made to test the listen and broadcast functions among neighbors.



#Some necessary variables for navigation
xpos = 0
ypos = 0
azimuth_robot_wrt_origin = 0
psi = 0


#this function establishes an origin and lets all robots know their positions 
#and orientations with respect to this origin robot
function localize(){
	#If you are agent 0, then calculate the positions of all neighbors then broadcast
	#them to all other robots
	if(id==0){
		set_leds(255,0,0)
		neighbors.foreach(
			function(rid,data){
				out_data = {}
				x = data.distance * math.cos(data.azimuth)
				y = data.distance * math.sin(data.azimuth)
				out_data[1] = x
				out_data[2] = y
				out_data[3] = data.azimuth
				message_id = string.tostring(rid)
				neighbors.broadcast(message_id,out_data)
			}
		)
	}
	else{
		message_id = string.tostring(id)
		neighbors.listen(message_id,
			function(vid,value,rid){
				if(rid == 0){#if the message is from the base node
					xpos = value[1]
					ypos = value[2]
					azimuth_robot_wrt_origin = value[3] #that's what I call alpha
				}
			}
		)
		neighbors.foreach(
			function(rid,data){
				if(rid == 0){
					azimuth_origin_wrt_robot = data.azimuth
					x_origin = data.distance*math.cos(data.azimuth)
					y_origin = data.distance*math.sin(data.azimuth)

					#The next part relates the azimuthes of both robots and the #rotation angle psi
					if(azimuth_robot_wrt_origin > 0){
						if(azimuth_origin_wrt_robot < 0){
							psi = -math.pi + math.abs(azimuth_robot_wrt_origin) + math.abs(azimuth_origin_wrt_robot)
						}
						else{
							psi = math.pi + math.abs(azimuth_robot_wrt_origin) - math.abs(azimuth_origin_wrt_robot)
						}
					}
					else{
						if(azimuth_origin_wrt_robot < 0){
							psi = -(math.pi + math.abs(azimuth_robot_wrt_origin) - math.abs(azimuth_origin_wrt_robot))
						}
						else{
							psi = -(-math.pi + math.abs(azimuth_robot_wrt_origin) + math.abs(azimuth_origin_wrt_robot))
						}
					}
					
					#This part makes sure to make the psi angle within -pi->pi
					if(math.abs(psi) > math.pi){
						psi = psi - 2*math.pi * (psi / math.abs(psi))
					}
				}
			}
		)
	}
}

function go_to_goal(x_target,y_target,current_heading){
	#this function makes a robot move towards a certain goal point
	k = 6.0
	left = 0
	right = 0

	#calculating the distance from the target
	dist = math.sqrt((x_target-xpos)*(x_target-xpos) + (y_target-ypos)*(y_target-ypos))

	#calculating heading to target
	heading_to_target = math.atan(y_target-ypos,x_target-xpos)
	
	#calculating error between current heading and heading to target
	error = heading_to_target - current_heading

	#applying a PID control (probably just P will do?) to steer the robot towards the #target and stop at a certain distance away from this target
	if(dist > 10){
		left =  6.0 + error*k
		right = 6.0 - error*k
		set_wheels(right,left)
	}
	else{
		set_wheels(0.0,0.0)
	}
}

function simple_localization_and_go_to_goal(){
	#if you're R0 calculate all other robots' positions, or else, know your location
	localize()

	#go towards a certain goal wrt the specified origin at R0 (if you're not R0) or stay still (if you're R0)
	if(id == 0){
		set_wheels(0.0,0.0)
	}
	else{
		go_to_goal(50,-50,psi)
	}
}

#################################################
### BUZZ FUNCTIONS ##############################
#################################################

# Executed at init time
function init() { 
}

# Executed every time step
function step() {
  simple_localization_and_go_to_goal()
}

# Executed once when the robot (or the simulator) is reset.
function reset() {
}
# Execute at exit
function destroy() {
}